name: Lint

on:
  workflow_call

jobs:
  lint:
    name: Run linting & tests
    runs-on: ubuntu-latest
    steps:
      - name: Install Python Dependencies
        uses: HassanAbouelela/actions/setup-python@setup-python_v1.4.0
        with:
          python_version: '3.11'
          install_args: "--only main --only lint --only test"

      # Attempt to run the bot. Setting `IN_CI` to true, so bot.run() is never called.
      # This is to catch import and cog setup errors that may appear in PRs, to avoid crash loops if merged.
      - name: Attempt bot setup
        run: "python -m bot"
        env:
          USE_FAKEREDIS: true
          IN_CI: true

      - name: Run tests
        run: pytest --disable-warnings -q

      # We will not run `flake8` here, as we will use a separate flake8
      # action.
      - name: Run pre-commit hooks
        run: SKIP=flake8 pre-commit run --all-files

      # Run flake8 and have it format the linting errors in the format of
      # the GitHub Workflow command to register error annotations. This
      # means that our flake8 output is automatically added as an error
      # annotation to both the run result and in the "Files" tab of a
      # pull request.
      #
      # Format used:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run flake8
        run: "flake8 \
        --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'"

      # Prepare the Pull Request Payload artifact. If this fails, we
      # we fail silently using the `continue-on-error` option. It's
      # nice if this succeeds, but if it fails for any reason, it
      # does not mean that our lint checks failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: pull-request-payload
          path: pull_request_payload.json
